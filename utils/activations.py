# YOLOv5 ðŸš€ by Ultralytics, GPL-3.0 license
"""
Activation functions
"""
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.distributions import Laplace



class SiLU(nn.Module):
    # SiLU activation https://arxiv.org/pdf/1606.08415.pdf
    @staticmethod
    def forward(x):
        return x * torch.sigmoid(x)


class Hardswish(nn.Module):
    # Hard-SiLU activation
    @staticmethod
    def forward(x):
        # return x * F.hardsigmoid(x)  # for TorchScript and CoreML
        return x * F.hardtanh(x + 3, 0.0, 6.0) / 6.0  # for TorchScript, CoreML and ONNX


class Mish(nn.Module):
    # Mish activation https://github.com/digantamisra98/Mish
    @staticmethod
    def forward(x):
        return x * F.softplus(x).tanh()


class MemoryEfficientMish(nn.Module):
    # Mish activation memory-efficient
    class F(torch.autograd.Function):

        @staticmethod
        def forward(ctx, x):
            ctx.save_for_backward(x)
            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))

        @staticmethod
        def backward(ctx, grad_output):
            x = ctx.saved_tensors[0]
            sx = torch.sigmoid(x)
            fx = F.softplus(x).tanh()
            return grad_output * (fx + x * sx * (1 - fx * fx))

    def forward(self, x):
        return self.F.apply(x)


class FReLU(nn.Module):
    # FReLU activation https://arxiv.org/abs/2007.11824
    def __init__(self, c1, k=3):  # ch_in, kernel
        super().__init__()
        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)
        self.bn = nn.BatchNorm2d(c1)

    def forward(self, x):
        return torch.max(x, self.bn(self.conv(x)))


class AconC(nn.Module):
    r""" ACON activation (activate or not)
    AconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is a learnable parameter
    according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, c1):
        super().__init__()
        self.p1 = nn.Parameter(torch.randn(1, c1, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, c1, 1, 1))
        self.beta = nn.Parameter(torch.ones(1, c1, 1, 1))

    def forward(self, x):
        dpx = (self.p1 - self.p2) * x
        return dpx * torch.sigmoid(self.beta * dpx) + self.p2 * x


class MetaAconC(nn.Module):
    r""" ACON activation (activate or not)
    MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, c1, k=1, s=1, r=16):  # ch_in, kernel, stride, r
        super().__init__()
        c2 = max(r, c1 // r)
        self.p1 = nn.Parameter(torch.randn(1, c1, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, c1, 1, 1))
        self.fc1 = nn.Conv2d(c1, c2, k, s, bias=True)
        self.fc2 = nn.Conv2d(c2, c1, k, s, bias=True)
        # self.bn1 = nn.BatchNorm2d(c2)
        # self.bn2 = nn.BatchNorm2d(c1)

    def forward(self, x):
        y = x.mean(dim=2, keepdims=True).mean(dim=3, keepdims=True)
        # batch-size 1 bug/instabilities https://github.com/ultralytics/yolov5/issues/2891
        # beta = torch.sigmoid(self.bn2(self.fc2(self.bn1(self.fc1(y)))))  # bug/unstable
        beta = torch.sigmoid(self.fc2(self.fc1(y)))  # bug patch BN layers removed
        dpx = (self.p1 - self.p2) * x
        return dpx * torch.sigmoid(beta * dpx) + self.p2 * x


class SoftModuleT(nn.Module):

    def __init__(self, beta=0.01):
        super().__init__()
        self.beta = beta
        self.tanh = nn.Tanh()

    def forward(self, x):
        return x * self.tanh(x / self.beta)


class StarReLU(nn.Module):
    """
    StarReLU: s * relu(x) ** 2 + b
    """

    def __init__(self, scale_value=1.0, bias_value=0.0,
                 scale_learnable=True, bias_learnable=True,
                 mode=None, inplace=False):
        super().__init__()
        self.inplace = inplace
        self.relu = nn.ReLU(inplace=inplace)
        self.scale = nn.Parameter(scale_value * torch.ones(1),
                                  requires_grad=scale_learnable)
        self.bias = nn.Parameter(bias_value * torch.ones(1),
                                 requires_grad=bias_learnable)

    def forward(self, x):
        return self.scale * self.relu(x) ** 2 + self.bias


class SSiLU(nn.Module):
    def __init__(self, inplace=True):
        super(SSiLU, self).__init__()
        self.siLu = nn.SiLU()

    def forward(self, x):
        return torch.max(self.siLu(x), x)


class StarMish(nn.Module):

    def __init__(self, alpha_init=1, beta_init=0.7, scale_learnable=True):
        super().__init__()
        self.alpha = nn.Parameter(alpha_init * torch.ones(1, dtype=torch.float32),
                                  requires_grad=scale_learnable)
        # self.beta = nn.Parameter(beta_init * torch.ones(1, dtype=torch.float32),
        #                         requires_grad=scale_learnable)

    def forward(self, x):
        # return x * F.tanh(self.alpha * torch.pow(F.softplus(x), self.beta))
        # return x * F.tanh(self.alpha * torch.log(torch.exp(x) * self.beta + 1))
        return x * F.sigmoid(torch.pow(x, self.alpha))


class StarGeLU(nn.Module):
    def __init__(self, beta_init=0.5):
        super().__init__()
        self.beta = beta_init
        self.gelu = nn.GELU()

    def forward(self, x):
        return self.gelu(x * self.beta)


class LaLU(nn.Module):
    def __init__(self, alpha_init=0.6, beta_init=1.05, loc=0, scale=0.8):
        super().__init__()
        self.beta = beta_init
        self.alpha = alpha_init
        self.laplace = Laplace(loc=loc, scale=scale)

    def forward(self, x):
        return self.laplace.cdf(value=(x * self.alpha)) * x * self.beta


class SoftArc(nn.Module):
    def __arc_part__(self, x):
        return torch.arctan(torch.exp(x)) / (np.pi / 2)

    def forward(self, x):
        return x * self.__arc_part__(x)


class HaLU(nn.Module):

    def __init__(self, alpha=0.5):
        super().__init__()
        self.alpha = alpha
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        return x * self.hardsigmoid(x * self.alpha)


class FSiLU(nn.Module):
    # SiLU activation https://arxiv.org/pdf/1606.08415.pdf

    # def __init__(self, base=2, alpha=1.5):
    def __init__(self, base=2):
        super(FSiLU, self).__init__()
        self.base = base
        # self.alpha = alpha

    def __sigmoid__(self, x):
        # return 1 / (1 + torch.pow(self.base, -x * self.alpha))
        mom = torch.add(1, torch.pow(self.base, -x))
        return torch.div(1, mom)
        # return 1 / (1 + torch.pow(self.base, -x))

    def forward(self, x):
        # return x * self.__sigmoid__(x)
        return torch.mul(x, self.__sigmoid__(x))


class LoLU(nn.Module):
    alpha = 1.025
    silu = nn.SiLU()

    @staticmethod
    def set(alpha):
        LoLU.alpha = alpha

    @staticmethod
    def forward(x):
        return LoLU.alpha * LoLU.silu(x)
        # return  x * (1 - torch.exp(-torch.exp(x)))


class SFLU(nn.Module):
    beta = 0.7
    a = 0
    lambdap = 1

    # @staticmethod
    # def sigma(x, top):
    #    return torch.add(1, torch.exp(-SFLU.beta * torch.sub(x, top)))
    #
    # @staticmethod
    # def body(x):
    #     top_sub = torch.sub(SFLU.a, torch.div(SFLU.lambdap, 2))
    #     top_mom = torch.add(SFLU.a, torch.div(SFLU.lambdap, 2))
    #     return torch.log(torch.div(SFLU.sigma(x, top_sub), top_mom))

    @staticmethod
    def forward(x):
        sigma_1 = 1 + torch.exp(-SFLU.beta * (x - (SFLU.a - (SFLU.lambdap / 2))))
        sigma_2 = 1 + torch.exp(-SFLU.beta * (x - (SFLU.a + (SFLU.lambdap / 2))))

        # sigma_1 = torch.add(1, torch.exp(-SFLU.beta * torch.sub(x, torch.sub(SFLU.a, (SFLU.lambdap / 2)))))
        # sigma_2 = torch.add(1, torch.exp(-SFLU.beta * torch.sub(x, torch.add(SFLU.a, (SFLU.lambdap / 2)))))
        return (( 1 / (SFLU.lambdap * SFLU.beta)) * torch.log((sigma_1 / sigma_2)) + 1) * x
        # return torch.add(1, (1 / (SFLU.lambdap * SFLU.beta)) * SFLU.body(x)) * x


class SCLU(nn.Module):
    alpha = 0.95

    @staticmethod
    def forward(x):
        return x * (1 / SCLU.alpha) * torch.log(
            (1 + torch.exp(SCLU.alpha * x)) / (1 + torch.exp(SCLU.alpha * (x-1))))


class StarSwish(nn.Module):

    def __init__(self, alpha_init=1, scale_learnable=False):
        super().__init__()
        self.scale_learnable = scale_learnable
        self.alpha = nn.Parameter(alpha_init * torch.ones(1, dtype=torch.float32),
                                  requires_grad=scale_learnable)



    def __sigmoid_2__(self, x):
        return 1 / (1 + self.alpha * torch.exp(-x))

    def forward(self, x):
        result = x * self.__sigmoid_2__(x) if self.scale_learnable else F.silu(x)
        return result


class Swim(nn.Module):
    k = 0.7

    @staticmethod
    def forward(x):
        return (x / 2) * ((Swim.k * x) / torch.pow((1 + (Swim.k ** 2) * (x ** 2)), 0.5) + 1)


class Aptx(nn.Module):
    alpha = 1
    beta = 0.6
    gamma = 0.5

    @staticmethod
    def forward(x):
        return (Aptx.alpha + F.tanh(Aptx.beta * x)) * Aptx.gamma * x